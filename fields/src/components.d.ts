/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomSelect {
        "label": string;
        "options": string[];
    }
    interface FSelect {
        "label": string;
        "options": string[];
        "selectedOption": string;
    }
    interface FieldInput {
        "label": string;
        "name": string;
        "pattern": string;
        "required": boolean;
        "type": string;
        "value": string;
    }
    interface FormCheckbox {
        "checked": boolean;
        "label": string;
    }
    interface FormInput {
        "label": string;
        "name": string;
        "pattern": string;
        "required": boolean;
        "type": string;
        "value": string | number;
    }
    interface FormSelect {
        "label": string;
        "options": string[] | number[];
        "required": boolean;
        "value": string | number;
    }
    interface PersonalDetails {
        "selectedLanguage": string;
    }
}
export interface FSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFSelectElement;
}
export interface FieldInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFieldInputElement;
}
export interface FormCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFormCheckboxElement;
}
export interface FormInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFormInputElement;
}
export interface FormSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFormSelectElement;
}
declare global {
    interface HTMLCustomSelectElement extends Components.CustomSelect, HTMLStencilElement {
    }
    var HTMLCustomSelectElement: {
        prototype: HTMLCustomSelectElement;
        new (): HTMLCustomSelectElement;
    };
    interface HTMLFSelectElement extends Components.FSelect, HTMLStencilElement {
    }
    var HTMLFSelectElement: {
        prototype: HTMLFSelectElement;
        new (): HTMLFSelectElement;
    };
    interface HTMLFieldInputElement extends Components.FieldInput, HTMLStencilElement {
    }
    var HTMLFieldInputElement: {
        prototype: HTMLFieldInputElement;
        new (): HTMLFieldInputElement;
    };
    interface HTMLFormCheckboxElement extends Components.FormCheckbox, HTMLStencilElement {
    }
    var HTMLFormCheckboxElement: {
        prototype: HTMLFormCheckboxElement;
        new (): HTMLFormCheckboxElement;
    };
    interface HTMLFormInputElement extends Components.FormInput, HTMLStencilElement {
    }
    var HTMLFormInputElement: {
        prototype: HTMLFormInputElement;
        new (): HTMLFormInputElement;
    };
    interface HTMLFormSelectElement extends Components.FormSelect, HTMLStencilElement {
    }
    var HTMLFormSelectElement: {
        prototype: HTMLFormSelectElement;
        new (): HTMLFormSelectElement;
    };
    interface HTMLPersonalDetailsElement extends Components.PersonalDetails, HTMLStencilElement {
    }
    var HTMLPersonalDetailsElement: {
        prototype: HTMLPersonalDetailsElement;
        new (): HTMLPersonalDetailsElement;
    };
    interface HTMLElementTagNameMap {
        "custom-select": HTMLCustomSelectElement;
        "f-select": HTMLFSelectElement;
        "field-input": HTMLFieldInputElement;
        "form-checkbox": HTMLFormCheckboxElement;
        "form-input": HTMLFormInputElement;
        "form-select": HTMLFormSelectElement;
        "personal-details": HTMLPersonalDetailsElement;
    }
}
declare namespace LocalJSX {
    interface CustomSelect {
        "label"?: string;
        "options"?: string[];
    }
    interface FSelect {
        "label"?: string;
        "onSelectChange"?: (event: FSelectCustomEvent<any>) => void;
        "options"?: string[];
        "selectedOption"?: string;
    }
    interface FieldInput {
        "label"?: string;
        "name"?: string;
        "onInputChange"?: (event: FieldInputCustomEvent<any>) => void;
        "pattern"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface FormCheckbox {
        "checked"?: boolean;
        "label"?: string;
        "onCheckboxChange"?: (event: FormCheckboxCustomEvent<boolean>) => void;
    }
    interface FormInput {
        "label"?: string;
        "name"?: string;
        "onInputChange"?: (event: FormInputCustomEvent<any>) => void;
        "pattern"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: string | number;
    }
    interface FormSelect {
        "label"?: string;
        "onFormSelectChange"?: (event: FormSelectCustomEvent<string | number>) => void;
        "options"?: string[] | number[];
        "required"?: boolean;
        "value"?: string | number;
    }
    interface PersonalDetails {
        "selectedLanguage"?: string;
    }
    interface IntrinsicElements {
        "custom-select": CustomSelect;
        "f-select": FSelect;
        "field-input": FieldInput;
        "form-checkbox": FormCheckbox;
        "form-input": FormInput;
        "form-select": FormSelect;
        "personal-details": PersonalDetails;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-select": LocalJSX.CustomSelect & JSXBase.HTMLAttributes<HTMLCustomSelectElement>;
            "f-select": LocalJSX.FSelect & JSXBase.HTMLAttributes<HTMLFSelectElement>;
            "field-input": LocalJSX.FieldInput & JSXBase.HTMLAttributes<HTMLFieldInputElement>;
            "form-checkbox": LocalJSX.FormCheckbox & JSXBase.HTMLAttributes<HTMLFormCheckboxElement>;
            "form-input": LocalJSX.FormInput & JSXBase.HTMLAttributes<HTMLFormInputElement>;
            "form-select": LocalJSX.FormSelect & JSXBase.HTMLAttributes<HTMLFormSelectElement>;
            "personal-details": LocalJSX.PersonalDetails & JSXBase.HTMLAttributes<HTMLPersonalDetailsElement>;
        }
    }
}
